# Define your custom views here or overwrite the default views. Default
# CRUD operations are generated by the ringo frameworkd.
import logging
import StringIO
import mimetypes
from py3o.template import Template
from pyramid.view import view_config

from ringo.lib.helpers import get_action_routename
from ringo.views.request import (
    handle_params,
    handle_history,
    is_confirmed,
    get_item_from_request,
)
from ringo.views.base import (
    create, rest_create,
    update, rest_update,
    read
)
from ringo_printtemplate import Printtemplate
from ringo_printtemplate.lib.renderer import PrintDialogRenderer

log = logging.getLogger(__name__)


def save_file(request, item):
    """Helper function which is called after the validation of the form
    succeeds. The function will get the data from the file from the
    request and set it in the model including size and mime type.
    Addiotionally it will set the filename based on the uploaded file if
    no other name is given."""
    try:
        #  TODO: Make this method a general helper method in ringo? (ti)
        #  <2015-01-31 12:15>
        # Rewind file
        request.POST.get('file').file.seek(0)
        data = request.POST.get('file').file.read()
        filename = request.POST.get('file').filename
        item.data = data
        item.size = len(data)
        item.mime = mimetypes.guess_type(filename)[0]
        if not request.POST.get('name'):
            item.name = filename
    except AttributeError:
        # Will be raised if the user submits no file.
        pass
    return item


def _render_template(template, item):
    """Will render the given template with the items data.

    :template: @todo
    :item: @todo
    :returns: @todo

    """
    out = StringIO.StringIO()
    temp = Template(StringIO.StringIO(template.data), out)
    temp.render({"item": item})
    return out


def _build_response(request, template, data):
    """Will return a response object with the rendererd template

    :request: Current request
    :template: The template.
    :data: Payload of the response
    :returns: Response object.

    """
    resp = request.response
    resp.content_type = str(template.mime)
    resp.content_disposition = 'attachment; filename="%s.odt"' % template.name
    resp.body = data.getvalue()
    return resp


def print_(request):
    handle_history(request)
    handle_params(request)
    item = get_item_from_request(request)
    renderer = PrintDialogRenderer(request, item)
    form = renderer.form
    if (request.method == 'POST'
       and is_confirmed(request)
       and form.validate(request.params)):
        template = form.data.get('printtemplates')[0]
        # Render the template
        out = _render_template(template, item)
        # Build response
        return _build_response(request, template, out)
    else:
        clazz = item.__class__
        rvalue = {}
        rvalue['dialog'] = renderer.render()
        rvalue['clazz'] = clazz
        rvalue['item'] = item
        return rvalue


########################################################################
#                     Overrwritten Bassecontroller                     #
########################################################################


@view_config(route_name=get_action_routename(Printtemplate, 'create'),
             renderer='/default/create.mako',
             permission='create')
def create_(request):
    return create(request, callback=save_file)


@view_config(route_name=get_action_routename(Printtemplate, 'update'),
             renderer='/default/update.mako',
             permission='update')
def update_(request):
    return update(request, callback=save_file)


@view_config(route_name=get_action_routename(Printtemplate, 'download'),
             permission='download')
def download(request):
    result = read(request)
    item = result['item']
    response = request.response
    response.content_type = str(item.mime)
    response.content_disposition = 'attachment; filename=%s' % item.name
    response.body = item.data
    return response


@view_config(route_name=get_action_routename(Printtemplate,
                                             'create', prefix="rest"),
             renderer='json',
             request_method="POST",
             permission='create')
def rest_create_(request):
    return rest_create(request, callback=save_file)


@view_config(route_name=get_action_routename(Printtemplate,
                                             'update', prefix="rest"),
             renderer='json',
             request_method="PUT",
             permission='update')
def rest_update_(request):
    return rest_update(request, callback=save_file)
